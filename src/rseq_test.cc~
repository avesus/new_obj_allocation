#include <util/arg.h>
#include <util/verbosity.h>

#include <timing/thread_helper.h>
#include <timing/timers.h>

#include <allocator/rseq/rseq_base.h>
#include <optimized/const_math.h>

#include <assert.h>

uint32_t iter      = 0;
uint32_t test_size = (1 << 20);
uint32_t nthread   = (32);


void *
restarting_set_idx_test(void * targ) {
    init_thread();
    uint64_t * v = (uint64_t *)targ;

    const uint32_t ltest_size = test_size;
    const uint32_t liter      = iter;
    for (uint32_t i = 0; i < ltest_size; ++i) {
        uint32_t start_cpu = get_start_cpu();
        uint32_t _i        = 0;
        do {

            const uint32_t ret =
                restarting_set_idx(v + 8 * start_cpu, start_cpu);
            if (__builtin_expect(ret < 64, 1)) {
                break;
            }
            else if (ret == 65) {
                _i        = 0;
                start_cpu = get_start_cpu();
                continue;
            }
            else if (_i == liter) {
                break;
            }
            ++__i;
        } while (1);
    }
}


int
main(int argc, char ** argv) {
    PREPARE_PARSER;
    ADD_ARG("-t", "--threads", false, Int, nthread, "Set nthreads");
    ADD_ARG("-n", false, Int, test_size, "Set n calls per thread");
    ADD_ARG("-i", false, Int, iter, "Set number of iterations");
    PARSE_ARGUMENTS;
}
